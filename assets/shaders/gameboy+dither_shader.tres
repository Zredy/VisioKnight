[gd_resource type="CanvasItemShader" format=1]

[resource]

_code = { "fragment":"float find_closest(float x, float y, float c0) {\n\t/*\n\tOriginal looping code, from http://devlog-martinsh.blogspot.com.es/2011/03/glsl-dithering.html\n\tvec4 dither[4];\n\tdither[0] = vec4( 1.0, 33.0, 9.0, 41.0);\n\tdither[1] = vec4(49.0, 17.0, 57.0, 25.0);\n\tdither[2] = vec4(13.0, 45.0, 5.0, 37.0);\n\tdither[3] = vec4(61.0, 29.0, 53.0, 21.0);\n\tfloat limit = 0.0;\n\tif(POINT_COORD.x < 4) {\n\t\tlimit = (dither[x][y]+1.0)/64.0;\n\t}\n\t*/\n\t\n\t// Now adapted for Godot\n\n\tvec4 dither0 = vec4( 1.0, 33.0, 9.0, 41.0);\n\tvec4 dither1 = vec4(49.0, 17.0, 57.0, 25.0);\n\tvec4 dither2 = vec4(13.0, 45.0, 5.0, 37.0);\n\tvec4 dither3 = vec4(61.0, 29.0, 53.0, 21.0);\n\t\n\tfloat limit = 0.0;\n\tfloat value = 0.0;\n\tfloat result = 0.0;\n\t\n\tvec4 dither;\n\t\n\tif(x < 1) \n\t{\n\t\tdither = dither0;\n\t} \n\tif(x >= 1) \n\t{\n\t\tdither = dither1;\n\t} \n\tif(x >= 2) \n\t{\n\t\tdither = dither2;\n\t} \n\tif(x >= 3) \n\t{\n\t\tdither = dither3;\n\t}\n\t\n\tif(x < 4) {\n\t\tif(y < 1) \n\t\t{\n\t\t\tvalue = dither.x;\n\t\t} \n\t\tif(y >= 1) \n\t\t{\n\t\t\tvalue = dither.y;\n\t\t} \n\t\tif(y >= 2) \n\t\t{\n\t\t\tvalue = dither.z;\n\t\t} \n\t\tif(y >= 3) \n\t\t{\n\t\t\tvalue = dither.w;\n\t\t}\n\t\n\t\tlimit = (value + 1.0) / 64.0;\n\t}\n\n\tif(c0 < limit) \n\t{\n\t\tresult = 0.0;\n\t} \n\telse \n\t{\n\t\tresult = 1.0;\n\t}\n\t\n\treturn result;\n}\n// Dithering related vars\nfloat scale = 256;\nvec2 xy = UV * scale;\nfloat x = mod(xy.x, 4);\nfloat y = mod(xy.y, 4);\nvec4 ditherRGB;\n\ncolor screen = tex(TEXTURE, UV);\nscreen += vec4(texscreen(SCREEN_UV), 0.0);\nditherRGB.r = find_closest(x, y, screen.r);\nditherRGB.g = find_closest(x, y, screen.g);\nditherRGB.b = find_closest(x, y, screen.b);\nditherRGB.a = find_closest(x, y, screen.a);\n\nuniform color color1; // 323c39\nuniform color color2; // 4b692f\nuniform color color3; // 6abe30\nuniform color color4; // fbf236\n\ncolor screen = color(texscreen(SCREEN_UV).rgb, 1.0);\nfloat ave = (screen.r + screen.g + screen.b)/3.0;\n\nvec4 fin;\n\nif(ave <  0.25 ) { fin = color1; }\nif(ave >= 0.25 ) { fin = color2; }\nif(ave >= 0.50 ) { fin = color3; }\nif(ave >= 0.75 ) { fin = color4; }\n\nCOLOR = fin;\n\nCOLOR = ditherRGB;", "fragment_ofs":0, "light":"", "light_ofs":0, "vertex":"", "vertex_ofs":0 }

